apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  labels:
    common.k8s.elastic.co/template-hash: "3585616172"
    common.k8s.elastic.co/type: kibana
    kibana.k8s.elastic.co/name: sm-main-kibana
  name: sm-main-kibana-kb
  namespace: sm-elasticsearch
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      common.k8s.elastic.co/type: kibana
      kibana.k8s.elastic.co/name: sm-main-kibana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        co.elastic.logs/module: kibana
        kibana.k8s.elastic.co/config-hash: "2826826049"
      creationTimestamp: null
      labels:
        common.k8s.elastic.co/type: kibana
        kibana.k8s.elastic.co/name: sm-main-kibana
        kibana.k8s.elastic.co/version: 7.9.0
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: NODE_OPTIONS
          value: --max-old-space-size=4096
        - name: SERVER_BASEPATH
          value: /kibana
        - name: SERVER_PUBLICBASEURL
          value: http://vip-ashish3.panasonicfa.com/kibana
        - name: SERVER_REWRITEBASEPATH
          value: "true"
        image: "{{ .Values.image.repository }}/kibana:7.9.0"
        imagePullPolicy: IfNotPresent
        name: kibana
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /kibana/login
            port: 5601
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/elastic-internal/kibana-config
          name: elastic-internal-kibana-config
          readOnly: true
        - mountPath: /usr/share/kibana/config
          name: elastic-internal-kibana-config-local
        - mountPath: /usr/share/kibana/config/elasticsearch-certs
          name: elasticsearch-certs
          readOnly: true
        - mountPath: /usr/share/kibana/data
          name: kibana-data
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /usr/bin/env
        - bash
        - -c
        - "#!/usr/bin/env bash\nset -eux\n\ninit_config_initialized_flag=/mnt/elastic-internal/kibana-config-local/elastic-internal-init-config.ok\n\nif
          [[ -f \"${init_config_initialized_flag}\" ]]; then\n    echo \"Kibana configuration
          already initialized.\"\n\texit 0\nfi\n\necho \"Setup Kibana configuration\"\n\nln
          -sf /mnt/elastic-internal/kibana-config/* /mnt/elastic-internal/kibana-config-local/\n\ntouch
          \"${init_config_initialized_flag}\"\necho \"Kibana configuration successfully
          prepared.\"\n"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: "{{ .Values.image.repository }}/kibana:7.9.0"
        imagePullPolicy: IfNotPresent
        name: elastic-internal-init-config
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        securityContext:
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/elastic-internal/kibana-config
          name: elastic-internal-kibana-config
          readOnly: true
        - mountPath: /mnt/elastic-internal/kibana-config-local
          name: elastic-internal-kibana-config-local
        - mountPath: /usr/share/kibana/config/elasticsearch-certs
          name: elasticsearch-certs
          readOnly: true
        - mountPath: /usr/share/kibana/data
          name: kibana-data
      nodeSelector:
        elknode: elk
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: pod
        operator: Equal
        value: elk
      - effect: NoExecute
        key: pod
        operator: Equal
        value: elk
      volumes:
      - name: elastic-internal-kibana-config
        secret:
          defaultMode: 420
          optional: false
          secretName: sm-main-kibana-kb-config
      - name: elastic-internal-kibana-config-local
      - name: elasticsearch-certs
        secret:
          defaultMode: 420
          optional: false
          secretName: sm-main-kibana-kb-es-ca
      - name: kibana-data
